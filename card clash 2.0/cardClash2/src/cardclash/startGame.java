/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package cardclash;

import java.awt.Image;
import javax.swing.ImageIcon;

/**
 *
 * @author Mlondi
 */

import java.awt.Image;
import javax.swing.ImageIcon;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import javax.swing.JComponent;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.plaf.basic.BasicMenuBarUI;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.table.DefaultTableModel;
public class startGame extends javax.swing.JFrame {

    /**
     * Creates new form introFrame
     */
    public startGame() {
        initComponents();
        setFixedSize();
                ImageIcon originalIcon = new ImageIcon("C:\\Users\\Mlondi\\Downloads\\cards\\cardBack.png");

// Get the original icon's image and create a scaled version ImageIcon(imagePaths[randomIndex2]);
Image originalImage = originalIcon.getImage();
int newWidth = 170; // Set the new width you desire
int newHeight = 230; // Set the new height you desire
Image scaledImage = originalImage.getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH); // research further


// Convert the scaled image back to an ImageIcon
ImageIcon scaledIcon = new ImageIcon(scaledImage);

// Set the scaled icon to jLabe6
usercard.setIcon(scaledIcon);
usercard.setText(""); // Clear the label's text if not needed
computercard.setIcon(scaledIcon);
computercard.setText(""); // Clear the label's text if not needed

    }
    private void setFixedSize() { // this method fixes the size of the frame upon running the file
        setSize(900, 700);  // Set the desired size(setSize)
        setResizable(false);  // Prevent resizing by the user
        setLocationRelativeTo(null); // sets the loaction of the frame to the centre
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jPanel1 = new javax.swing.JPanel();
        logo = new javax.swing.JLabel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));
        startBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        copyrightsLb = new javax.swing.JLabel();
        usercard = new javax.swing.JLabel();
        computercard = new javax.swing.JLabel();
        loggedinusername = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        useramount = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        userscompuscore = new javax.swing.JLabel();
        useramountR = new javax.swing.JLabel();
        whowon = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        roundIndicator = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        moreMenu = new javax.swing.JMenu();
        AboutMenuItem = new javax.swing.JMenuItem();
        helpMenuItem = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();

        jMenu1.setText("jMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(102, 102, 102));
        getContentPane().setLayout(null);

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel1.add(logo, new org.netbeans.lib.awtextra.AbsoluteConstraints(615, 74, -1, 184));
        jPanel1.add(filler1, new org.netbeans.lib.awtextra.AbsoluteConstraints(578, 331, -1, -1));

        startBtn.setBackground(new java.awt.Color(0, 0, 0));
        startBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        startBtn.setForeground(new java.awt.Color(255, 0, 153));
        startBtn.setText("START");
        startBtn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 153), 3));
        startBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                startBtnMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                startBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                startBtnMouseExited(evt);
            }
        });
        startBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startBtnActionPerformed(evt);
            }
        });
        jPanel1.add(startBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 350, 97, 37));

        jLabel1.setFont(new java.awt.Font("Lucida Handwriting", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Play your cards right and win the night!");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 20, 360, -1));

        copyrightsLb.setForeground(new java.awt.Color(255, 255, 255));
        copyrightsLb.setText("Copyright Â© Card Clash All are reserved ");
        jPanel1.add(copyrightsLb, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 540, -1, -1));

        usercard.setForeground(new java.awt.Color(255, 0, 153));
        usercard.setText("jLabel6");
        jPanel1.add(usercard, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 180, -1, -1));

        computercard.setForeground(new java.awt.Color(204, 0, 204));
        computercard.setIcon(new javax.swing.ImageIcon("C:\\Users\\Mlondi\\Downloads\\cards\\cardBack.png")); // NOI18N
        computercard.setText("jLabel7");
        jPanel1.add(computercard, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 180, -1, -1));

        loggedinusername.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        loggedinusername.setForeground(new java.awt.Color(255, 0, 255));
        loggedinusername.setText("jack");
        jPanel1.add(loggedinusername, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 100, -1, -1));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 0, 204));
        jLabel9.setText("COMPUTER");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 100, -1, -1));

        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 51, 51));
        jLabel2.setText("Balance");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 180, -1, -1));

        useramount.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        useramount.setForeground(new java.awt.Color(255, 51, 51));
        useramount.setText("10000");
        jPanel1.add(useramount, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 180, -1, -1));

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 51, 51));
        jLabel3.setText("Score");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 220, -1, -1));

        jLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 51, 51));
        jLabel4.setText("enter amount");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 250, -1, -1));

        userscompuscore.setBackground(new java.awt.Color(0, 102, 102));
        userscompuscore.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        userscompuscore.setForeground(new java.awt.Color(255, 51, 51));
        userscompuscore.setText("0 : 0");
        jPanel1.add(userscompuscore, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 220, -1, -1));

        useramountR.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        useramountR.setForeground(new java.awt.Color(255, 51, 51));
        useramountR.setText("R");
        jPanel1.add(useramountR, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 180, -1, -1));

        whowon.setBackground(new java.awt.Color(255, 255, 255));
        whowon.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        whowon.setForeground(new java.awt.Color(255, 51, 51));
        whowon.setText("PRESS START");
        jPanel1.add(whowon, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 320, -1, -1));
        jPanel1.add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 280, 103, -1));

        roundIndicator.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        roundIndicator.setForeground(new java.awt.Color(255, 204, 204));
        roundIndicator.setText("ROUND 1");
        jPanel1.add(roundIndicator, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 100, -1, -1));

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 1000, 600);

        jMenuBar1.setBackground(new java.awt.Color(102, 102, 102));

        moreMenu.setBackground(new java.awt.Color(0, 0, 0));
        moreMenu.setText("More");

        AboutMenuItem.setText("About Us");
        AboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AboutMenuItemActionPerformed(evt);
            }
        });
        moreMenu.add(AboutMenuItem);

        helpMenuItem.setText("Help");
        helpMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                helpMenuItemMouseClicked(evt);
            }
        });
        helpMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpMenuItemActionPerformed(evt);
            }
        });
        moreMenu.add(helpMenuItem);

        jMenuItem1.setText("history");
        jMenuItem1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuItem1MouseClicked(evt);
            }
        });
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        moreMenu.add(jMenuItem1);

        jMenuBar1.add(moreMenu);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startBtnActionPerformed
             String userInput = jTextField1.getText();
   
         if (userInput.isEmpty()) {
        JOptionPane.showMessageDialog(null, "enter an amount", "Empty Fields", JOptionPane.WARNING_MESSAGE);
       // return;
    }
  
  else if(!userInput.isEmpty()) {
               roundsToPlay = Integer.parseInt(userInput);
        try {
            int balance = Integer.parseInt(userInput);
            
            if (balance >= 10 && balance <= 100) {
                if (usedImageIndices.size() < imagePaths.length) {
        // Randomly select two indices that haven't been used yet
        int randomIndex1, randomIndex2;
         currentRound++;
        roundIndicator.setText("ROUND " + currentRound + " OF 26");//ROUND 26 OF 26
        
       
        
        do {
            randomIndex1 = (int) (Math.random() * imagePaths.length);
        } while (usedImageIndices.contains(randomIndex1));
        
        do {
            randomIndex2 = (int) (Math.random() * imagePaths.length);
        } while (usedImageIndices.contains(randomIndex2) || randomIndex2 == randomIndex1);
        
        // Adds the indices to the list of used indices
        usedImageIndices.add(randomIndex1);
        usedImageIndices.add(randomIndex2);
        
        // Creates ImageIcons for the selected images
        ImageIcon originalIcon1 = new ImageIcon(imagePaths[randomIndex1]);
        Image originalImage1 = originalIcon1.getImage();
        int newWidth = 170;
        int newHeight = 230;
        Image scaledImage1 = originalImage1.getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH);
        ImageIcon scaledIcon1 = new ImageIcon(scaledImage1);
        
        ImageIcon originalIcon2 = new ImageIcon(imagePaths[randomIndex2]);
        Image originalImage2 = originalIcon2.getImage();
        Image scaledImage2 = originalImage2.getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH);
        ImageIcon scaledIcon2 = new ImageIcon(scaledImage2);
        
        // Assign points to the drawn cards using determinePoints function
        int playerPoints = determinePoints(originalIcon1.getDescription());
        int computerPoints =  determinePoints(originalIcon2.getDescription());
                // Determine round winner
               
        playerTotalScore += playerPoints;
        computerTotalScore += computerPoints;
        
         round++;
        System.out.println("ROUND " +round);
        
        // Print out scores
        System.out.println("Player Total Score: " + playerTotalScore);
        System.out.println("Computer Total Score: " + computerTotalScore);
        

        userscompuscore.setText(playerTotalScore + " : "+ computerTotalScore);
        

       
        // 
        
        String roundResult;
        if (playerPoints > computerPoints) {
           
            roundResult = "You won!";
            String bal = useramount.getText();
            int bals = Integer.parseInt(bal);
            int newBalnce =  bals + roundsToPlay;
            String myusername = loggedinusername.getText();
            updateBalance( myusername,  newBalnce);
            useramount.setText("" + newBalnce);
            
        } else if (playerPoints == computerPoints) {
            roundResult = "It's a tie!";
        } else {
            roundResult = "Computer won!";
            String bal = useramount.getText();
            int bals = Integer.parseInt(bal);
            int newBalnce =  bals - roundsToPlay;
            String myusername = loggedinusername.getText();
            updateBalance( myusername,  newBalnce);
            useramount.setText("" + newBalnce);
        }
        
        // Display round result
        whowon.setText( roundResult);

        // Print out scores
        System.out.println("Player Points: " + playerPoints);
        System.out.println("Computer Points: " + computerPoints);
        
        usercard.setIcon(scaledIcon1);
        usercard.setText("");
        computercard.setIcon(scaledIcon2);
        computercard.setText("");
        int newBalnce;
       
        if (currentRound == 26) {
             String myusername = loggedinusername.getText();
             
             recordGameResult( myusername,  playerTotalScore,  computerTotalScore);
             if(playerTotalScore>computerTotalScore){
                JOptionPane.showMessageDialog(this, "Game Over! You Won Score " + playerTotalScore + " : " + computerTotalScore);    
                usedImageIndices.clear();
                int currentRounhd = 1;
                roundIndicator.setText("ROUND " + currentRounhd);
                playerTotalScore = 0;
                computerTotalScore = 0;
                whowon.setText("PRESS PLAY");
                currentIndex = 0;
                currentRound = 1;
                round = 0;
                roundIndicator.setText("ROUND " + currentRound);

                userscompuscore.setText(playerTotalScore + " : "+ computerTotalScore);


        ImageIcon originalIcon = new ImageIcon("C:\\Users\\Mlondi\\Downloads\\cards\\cardBack.png");
    usercard.setIcon(originalIcon);
    usercard.setText("");
    computercard.setIcon(originalIcon);
    computercard.setText("");
             String bal = useramount.getText();
        int bals = Integer.parseInt(bal);
              newBalnce =  bals + roundsToPlay;
              updateBalance( myusername,  newBalnce);
             useramount.setText("" + newBalnce);
             
             
             } else if(playerTotalScore<computerTotalScore){
                  JOptionPane.showMessageDialog(this, "Game Over! You lost Score " + playerTotalScore + " : " + computerTotalScore);
                  
                       usedImageIndices.clear();
        int currentRounhd = 1;
        roundIndicator.setText("ROUND " + currentRounhd);
        playerTotalScore = 0;
        computerTotalScore = 0;
         whowon.setText("PRESS PLAY");
         currentIndex = 0;
        currentRound = 1;
         round = 0;
        roundIndicator.setText("ROUND " + currentRound);
     
        userscompuscore.setText(playerTotalScore + " : "+ computerTotalScore);
        

        ImageIcon originalIcon = new ImageIcon("C:\\Users\\Mlondi\\Downloads\\cards\\cardBack.png");
    usercard.setIcon(originalIcon);
    usercard.setText("");
    computercard.setIcon(originalIcon);
    computercard.setText("");
                          String bal = useramount.getText();
        int bals = Integer.parseInt(bal);
              newBalnce =  bals - roundsToPlay;
               updateBalance( myusername,  newBalnce);
             useramount.setText("" + newBalnce);
                          useramount.setText("" + newBalnce);
            
             }
                 
            
        }}
            } else {
                JOptionPane.showMessageDialog(this, "Please enter a balance between 10 and 100.");
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please enter a valid number.");
        }
    } else {
        JOptionPane.showMessageDialog(this, "Please enter a balance.");
    }
         
    }//GEN-LAST:event_startBtnActionPerformed

    private void startBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_startBtnMouseEntered
        // TODO add your handling code here:
        startBtn.setBackground(new java.awt.Color(255,0,153)); // Changes to the desired color
        startBtn.setForeground(new java.awt.Color(0,0,0)); // Changes to the desired text color
    }//GEN-LAST:event_startBtnMouseEntered

    private void startBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_startBtnMouseExited
        // TODO add your handling code here:
        startBtn.setBackground(new java.awt.Color(0,0,0)); // Changes to the desired color
        startBtn.setForeground(new java.awt.Color(255,0,153)); // Changes to the desired text color
    }//GEN-LAST:event_startBtnMouseExited

    private void AboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AboutMenuItemActionPerformed
        // TODO add your handling code here:
          setVisible(false);
        new aboutUs().setVisible(true); 
    }//GEN-LAST:event_AboutMenuItemActionPerformed

    private void helpMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpMenuItemActionPerformed
        // TODO add your handling code here:
        setVisible(false);
        new help().setVisible(true); 
    }//GEN-LAST:event_helpMenuItemActionPerformed

           
          String[] imagePaths = {
     //this one is worth 12 point
    "C:\\Users\\Mlondi\\Downloads\\cards\\cardSpadesQ.png",
      
        
    //this one is worth 13 point
    "C:\\Users\\Mlondi\\Downloads\\cards\\cardSpadesK.png",
    
    //this one is worth 11 point
    "C:\\Users\\Mlondi\\Downloads\\cards\\cardSpadesJ.png",
    //this one is worth 1 point
    "C:\\Users\\Mlondi\\Downloads\\cards\\cardSpadesA.png",
    
    //cardSpades10
    
    //this one is worth 10 point
    "C:\\Users\\Mlondi\\Downloads\\cards\\cardSpades10.png",
    
    //this one is worth 9 point
    "C:\\Users\\Mlondi\\Downloads\\cards\\cardSpades9.png",
    
    //this one is worth 8 point
    "C:\\Users\\Mlondi\\Downloads\\cards\\cardSpades8.png",
    
    //this one is worth 7 point
    "C:\\Users\\Mlondi\\Downloads\\cards\\cardSpades7.png",
    
    //this one is worth 6 point
    "C:\\Users\\Mlondi\\Downloads\\cards\\cardSpades6.png",
    
    //this one is worth 5 point
    "C:\\Users\\Mlondi\\Downloads\\cards\\cardSpades5.png",
    
    //this one is worth 4 point
    "C:\\Users\\Mlondi\\Downloads\\cards\\cardSpades4.png",
    
    //this one is worth 3 point
    "C:\\Users\\Mlondi\\Downloads\\cards\\cardSpades3.png",
    
    //this one is worth 2 point
    "C:\\Users\\Mlondi\\Downloads\\cards\\cardSpades2.png",
    
    

    
    //this one is worth 12 point
    "C:\\Users\\Mlondi\\Downloads\\cards\\cardHeartsQ.png",
    
    //this one is worth 13 point
    "C:\\Users\\Mlondi\\Downloads\\cards\\cardHeartsK.png",
    
    //this one is worth 12 point
    "C:\\Users\\Mlondi\\Downloads\\cards\\cardHeartsJ.png",
    
    //this one is worth 1 point
    "C:\\Users\\Mlondi\\Downloads\\cards\\cardHeartsA.png",
    
    
    
    //this one is worth 10 point
    "C:\\Users\\Mlondi\\Downloads\\cards\\cardHearts10.png",
    
    //this one is worth 9 point
    "C:\\Users\\Mlondi\\Downloads\\cards\\cardHearts9.png",
    
    //this one is worth 8 point
    "C:\\Users\\Mlondi\\Downloads\\cards\\cardHearts8.png",
    
    //this one is worth 7 point
    "C:\\Users\\Mlondi\\Downloads\\cards\\cardSpades7.png",
    
    //this one is worth 6 point
    "C:\\Users\\Mlondi\\Downloads\\cards\\cardHearts6.png",
    
    //this one is worth 5 point
    "C:\\Users\\Mlondi\\Downloads\\cards\\cardHearts5.png",
    
    //this one is worth 4 point
    "C:\\Users\\Mlondi\\Downloads\\cards\\cardHearts4.png",
    
    
    //this one is worth 3 point
    "C:\\Users\\Mlondi\\Downloads\\cards\\cardHearts3.png",
    
    //this one is worth 2 point
    "C:\\Users\\Mlondi\\Downloads\\cards\\cardHearts2.png",
    
    //this one is worth 12 point
    "C:\\Users\\Mlondi\\Downloads\\cards\\cardDiamondsQ.png",
    
    //this one is worth 13 point
    "C:\\Users\\Mlondi\\Downloads\\cards\\cardDiamondsK.png",
    
    //this one is worth 12 point
    "C:\\Users\\Mlondi\\Downloads\\cards\\cardDiamondsJ.png",
    
    //this one is worth 1 point
    "C:\\Users\\Mlondi\\Downloads\\cards\\cardDiamondsA.png",
    
    
    //this one is worth 10 point
    "C:\\Users\\Mlondi\\Downloads\\cards\\cardDiamonds10.png",
    
    //this one is worth 9 point
    "C:\\Users\\Mlondi\\Downloads\\cards\\cardDiamonds9.png",
    
    //this one is worth 8 point
    "C:\\Users\\Mlondi\\Downloads\\cards\\cardDiamonds8.png",
    
    //this one is worth 7 point
    "C:\\Users\\Mlondi\\Downloads\\cards\\cardDiamonds7.png",
    
    //this one is worth 6 point
    "C:\\Users\\Mlondi\\Downloads\\cards\\cardDiamonds6.png",
    
    //this one is worth 5 point
    "C:\\Users\\Mlondi\\Downloads\\cards\\cardDiamonds5.png",
    
    //this one is worth 4 point
    "C:\\Users\\Mlondi\\Downloads\\cards\\cardDiamonds4.png",
    
    //this one is worth 3 point
    "C:\\Users\\Mlondi\\Downloads\\cards\\cardDiamonds3.png",
    
    //this one is worth 2 point
    "C:\\Users\\Mlondi\\Downloads\\cards\\cardDiamonds2.png",
    
    
    //this one is worth 12 point
    "C:\\Users\\Mlondi\\Downloads\\cards\\cardClubsQ.png",
    
    //this one is worth 13 point
    "C:\\Users\\Mlondi\\Downloads\\cards\\cardClubsK.png",
    
    //this one is worth 11 point
    "C:\\Users\\Mlondi\\Downloads\\cards\\cardClubsJ.png",
    
    //this one is worth 1 point
    "C:\\Users\\Mlondi\\Downloads\\cards\\cardClubsA.png",
    
    
    //this one is worth 10 point
    "C:\\Users\\Mlondi\\Downloads\\cards\\cardClubs10.png",
    
    //this one is worth 9 point
    "C:\\Users\\Mlondi\\Downloads\\cards\\cardClubs9.png",
    
    //this one is worth 8 point
    "C:\\Users\\Mlondi\\Downloads\\cards\\cardClubs8.png",
    
    //this one is worth 7 point
    "C:\\Users\\Mlondi\\Downloads\\cards\\cardClubs7.png",
    
    //this one is worth 6 point
    "C:\\Users\\Mlondi\\Downloads\\cards\\cardClubs6.png",
    
    //this one is worth 5 point
    "C:\\Users\\Mlondi\\Downloads\\cards\\cardClubs5.png",
    
    //this one is worth 4 point
    "C:\\Users\\Mlondi\\Downloads\\cards\\cardClubs4.png",
    
    //this one is worth 3 point
    "C:\\Users\\Mlondi\\Downloads\\cards\\cardClubs3.png",
    
    //this one is worth 2 point
    "C:\\Users\\Mlondi\\Downloads\\cards\\cardClubs2.png",
    // Add more image paths here
};
    
    
List<Integer> usedImageIndices = new ArrayList<>();

int currentIndex = 0;
int currentRound = 1;
int round = 0;


private void recordGameResult(String username, int playerTotalScore, int computerTotalScore) {
    String status;
    String score = playerTotalScore + " : " + computerTotalScore;
    String results;
    
    if (playerTotalScore > computerTotalScore) {
        status = "Win";
        results = "" + roundsToPlay;
    } else if (playerTotalScore < computerTotalScore) {
        status = "Loss";
        results = "-" + roundsToPlay;
    } else {
        status = "Draw";
        results = "0";
    }

   String jdbcUrl = "jdbc:mysql://localhost:3306/cardgame?zeroDateTimeBehavior=CONVERT_TO_NULL";
    String dbUser = "root";
    String dbPassword = "Davis2247,8";

    try {
        Connection connection = DriverManager.getConnection(jdbcUrl, dbUser, dbPassword);

        String insertQuery = "INSERT INTO games (status, score, results, username) VALUES (?, ?, ?, ?)";
        PreparedStatement preparedStatement = connection.prepareStatement(insertQuery);
        preparedStatement.setString(1, status);
        preparedStatement.setString(2, score);
        preparedStatement.setString(3, results);
        preparedStatement.setString(4, username);

        int rowsInserted = preparedStatement.executeUpdate();

        preparedStatement.close();
        connection.close();

        if (rowsInserted > 0) {
            System.out.println("Game result recorded successfully.");
        } else {
            System.out.println("Failed to record game result.");
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
}



private int determinePoints(String imagePath) {
    int points = 0;
    
    for (String path : imagePaths) {
        if (path.equals(imagePath)) {
            // Assign points based on the image path
            if (path.contains("cardSpadesQ") || path.contains("cardHeartsQ") || path.contains("cardDiamondsQ") || path.contains("cardClubsQ")) {
                points = 12;
            } else if (path.contains("cardSpadesK") || path.contains("cardHeartsK") || path.contains("cardDiamondsK") || path.contains("cardClubsK")) {
                points = 13;
            } else if (path.contains("cardSpadesJ") || path.contains("cardHeartsJ") || path.contains("cardClubsJ")) {
                points = 11;
            } else if (path.contains("cardSpadesA") || path.contains("cardHeartsA") || path.contains("cardDiamondsA") || path.contains("cardClubsA")) {
                points = 1;
            } else if (path.contains("cardSpades10") || path.contains("cardHearts10") || path.contains("cardDiamonds10") || path.contains("cardClubs10")) {
                points = 10;
            } else if (path.contains("cardSpades9") || path.contains("cardHearts9") || path.contains("cardDiamonds9") || path.contains("cardClubs9")) {
                points = 9;
            } else if (path.contains("cardSpades8") || path.contains("cardHearts8") || path.contains("cardDiamonds8") || path.contains("cardClubs8")) {
                points = 8;
            } else if (path.contains("cardSpades7") || path.contains("cardHearts7") || path.contains("cardDiamonds7") || path.contains("cardClubs7")) {
                points = 7;
            } else if (path.contains("cardSpades6") || path.contains("cardHearts6") || path.contains("cardDiamonds6") || path.contains("cardClubs6")) {
                points = 6;
            } else if (path.contains("cardSpades5") || path.contains("cardHearts5") || path.contains("cardDiamonds5") || path.contains("cardClubs5")) {
                points = 5;
            } else if (path.contains("cardSpades4") || path.contains("cardHearts4") || path.contains("cardDiamonds4") || path.contains("cardClubs4")) {
                points = 4;
            } else if (path.contains("cardSpades3") || path.contains("cardHearts3") || path.contains("cardDiamonds3") || path.contains("cardClubs3")) {
                points = 3;
            } else if (path.contains("cardSpades2") || path.contains("cardHearts2") || path.contains("cardDiamonds2") || path.contains("cardClubs2")) {
                points = 2;
            }
            
            break; // No need to continue searching
        }
    }
    
    return points;
}

int playerTotalScore = 0;
int computerTotalScore = 0;
int roundsToPlay;
int balance = 1000;

private void updateBalance(String username, int newBalance) {
    String jdbcUrl = "jdbc:mysql://localhost:3306/cardgame?zeroDateTimeBehavior=CONVERT_TO_NULL";
    String dbUser = "root";
    String dbPassword = "Davis2247,8";
    
    System.out.println("trying...");

    try {
        Connection connection = DriverManager.getConnection(jdbcUrl, dbUser, dbPassword);

        String updateQuery = "UPDATE userdata SET balance = ? WHERE username = ?";
        PreparedStatement preparedStatement = connection.prepareStatement(updateQuery);
        preparedStatement.setDouble(1, newBalance);
        preparedStatement.setString(2, username);

        int rowsUpdated = preparedStatement.executeUpdate();

        preparedStatement.close();
        connection.close();

        if (rowsUpdated > 0) {
            System.out.println("Balance updated successfully.");
        } else {
            System.out.println("Failed to update balance.");
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
}

    private void startBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_startBtnMouseClicked
       String userInput = jTextField1.getText();

        if (userInput.isEmpty()) {
            JOptionPane.showMessageDialog(null, "enter an amount", "Empty Fields", JOptionPane.WARNING_MESSAGE);
            return;
        }

        else if(!userInput.isEmpty()) {
            roundsToPlay = Integer.parseInt(userInput);
            try {
                int balance = Integer.parseInt(userInput);

                if (balance >= 10 && balance <= 100) {
                    if (usedImageIndices.size() < imagePaths.length) {
                        // Randomly select two indices that haven't been used yet
                        int randomIndex1, randomIndex2;
                        currentRound++;
                        roundIndicator.setText("ROUND " + currentRound + " OF 26");//ROUND 26 OF 26

                        do {
                            randomIndex1 = (int) (Math.random() * imagePaths.length);
                        } while (usedImageIndices.contains(randomIndex1));

                        do {
                            randomIndex2 = (int) (Math.random() * imagePaths.length);
                        } while (usedImageIndices.contains(randomIndex2) || randomIndex2 == randomIndex1);

                        // Add the indices to the list of used indices
                        usedImageIndices.add(randomIndex1);
                        usedImageIndices.add(randomIndex2);

                        // Create ImageIcons for the selected images
                        ImageIcon originalIcon1 = new ImageIcon(imagePaths[randomIndex1]);
                        Image originalImage1 = originalIcon1.getImage();
                        int newWidth = 170;
                        int newHeight = 230;
                        Image scaledImage1 = originalImage1.getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH);
                        ImageIcon scaledIcon1 = new ImageIcon(scaledImage1);

                        ImageIcon originalIcon2 = new ImageIcon(imagePaths[randomIndex2]);
                        Image originalImage2 = originalIcon2.getImage();
                        Image scaledImage2 = originalImage2.getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH);
                        ImageIcon scaledIcon2 = new ImageIcon(scaledImage2);

                        // Assign points to the drawn cards using determinePoints function
                        int playerPoints = determinePoints(originalIcon1.getDescription());
                        int computerPoints =  determinePoints(originalIcon2.getDescription());
                        // Determine round winner

                        playerTotalScore += playerPoints;
                        computerTotalScore += computerPoints;

                        round++;
                        System.out.println("ROUND " +round);

                        // Print out scores
                        System.out.println("Player Total Score: " + playerTotalScore);
                        System.out.println("Computer Total Score: " + computerTotalScore);

                        userscompuscore.setText(playerTotalScore + " : "+ computerTotalScore);

                        String roundResult;
                        if (playerPoints > computerPoints) {
                            roundResult = "You won!";
                        } else if (playerPoints == computerPoints) {
                            roundResult = "It's a tie!";
                        } else {
                            roundResult = "Computer won!";
                        }

                        // Display round result
                        whowon.setText( roundResult);

                        // Print out scores
                        System.out.println("Player Points: " + playerPoints);
                        System.out.println("Computer Points: " + computerPoints);

                        usercard.setIcon(scaledIcon1);
                        usercard.setText("");
                        computercard.setIcon(scaledIcon2);
                        computercard.setText("");
                        int newBalnce;

                        if (currentRound == 26) {
                            String myusername = loggedinusername.getText();

                            recordGameResult( myusername,  playerTotalScore,  computerTotalScore);
                            if(playerTotalScore>computerTotalScore){
                                JOptionPane.showMessageDialog(this, "Game Over! You Won Score " + playerTotalScore + " : " + computerTotalScore);

                                usedImageIndices.clear();
                                int currentRounhd = 1;
                                roundIndicator.setText("ROUND " + currentRounhd);
                                playerTotalScore = 0;
                                computerTotalScore = 0;
                                whowon.setText("PRESS PLAY");
                                currentIndex = 0;
                                currentRound = 1;
                                round = 0;
                                roundIndicator.setText("ROUND " + currentRound);

                                userscompuscore.setText(playerTotalScore + " : "+ computerTotalScore);

                                ImageIcon originalIcon = new ImageIcon("C:\\Users\\Mlondi\\Downloads\\cards\\cardBack.png");
                                usercard.setIcon(originalIcon);
                                usercard.setText("");
                                computercard.setIcon(originalIcon);
                                computercard.setText("");
                                String bal = useramount.getText();
                                int bals = Integer.parseInt(bal);
                                newBalnce =  bals + roundsToPlay;
                                updateBalance( myusername,  newBalnce);
                                useramount.setText("" + newBalnce);

                            } else if(playerTotalScore<computerTotalScore){
                                JOptionPane.showMessageDialog(this, "Game Over! You lost Score " + playerTotalScore + " : " + computerTotalScore);

                                usedImageIndices.clear();
                                int currentRounhd = 1;
                                roundIndicator.setText("ROUND " + currentRounhd);
                                playerTotalScore = 0;
                                computerTotalScore = 0;
                                whowon.setText("PRESS PLAY");
                                currentIndex = 0;
                                currentRound = 1;
                                round = 0;
                                roundIndicator.setText("ROUND " + currentRound);

                                userscompuscore.setText(playerTotalScore + " : "+ computerTotalScore);

                                ImageIcon originalIcon = new ImageIcon("C:\\Users\\Mlondi\\Downloads\\cards\\cardBack.png");
                                usercard.setIcon(originalIcon);
                                usercard.setText("");
                                computercard.setIcon(originalIcon);
                                computercard.setText("");
                                String bal = useramount.getText();
                                int bals = Integer.parseInt(bal);
                                newBalnce =  bals - roundsToPlay;
                                updateBalance( myusername,  newBalnce);
                                useramount.setText("" + newBalnce);
                                useramount.setText("" + newBalnce);

                            }

                        }}
                    } else {
                        JOptionPane.showMessageDialog(this, "Please enter a balance between 10 and 100.");
                    }
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "Please enter a valid number.");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please enter a balance.");
            }
    }//GEN-LAST:event_startBtnMouseClicked

    private void jMenuItem1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem1MouseClicked
             String name = loggedinusername.getText();
              history J = new history();
              J.user.setText(name);
              J.setVisible(true);
              this.setVisible(false);
              
    }//GEN-LAST:event_jMenuItem1MouseClicked

    private void helpMenuItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_helpMenuItemMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_helpMenuItemMouseClicked

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        String name = loggedinusername.getText();
              history J = new history();
              J.user.setText(name);
              J.setVisible(true);
              this.setVisible(false);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(startGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(startGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(startGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(startGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new startGame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AboutMenuItem;
    private javax.swing.JLabel computercard;
    private javax.swing.JLabel copyrightsLb;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JMenuItem helpMenuItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField1;
    public javax.swing.JLabel loggedinusername;
    private javax.swing.JLabel logo;
    private javax.swing.JMenu moreMenu;
    private javax.swing.JLabel roundIndicator;
    private javax.swing.JButton startBtn;
    public javax.swing.JLabel useramount;
    private javax.swing.JLabel useramountR;
    private javax.swing.JLabel usercard;
    private javax.swing.JLabel userscompuscore;
    private javax.swing.JLabel whowon;
    // End of variables declaration//GEN-END:variables
}
